# Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N]. 
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X


# Пример 
# 5
# 1 2 3 4 5
# 3
# -> 1


# Задача 18: Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X. 
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X

# Пример
# 5
# 1 2 3 4 5
# 6

# -> 5


#  Задание
 
 
# Пример


# Задача 20: В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. В случае с английским алфавитом очки распределяются так:
# A, E, I, O, U, L, N, S, T, R – 1 очко;
# D, G – 2 очка;
# B, C, M, P – 3 очка;
# F, H, V, W, Y – 4 очка;
# K – 5 очков;
# J, X – 8 очков;
# Q, Z – 10 очков.
# А русские буквы оцениваются так:
# А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# Д, К, Л, М, П, У – 2 очка;
# Б, Г, Ё, Ь, Я – 3 очка;
# Й, Ы – 4 очка;
# Ж, З, Х, Ц, Ч – 5 очков;
# Ш, Э, Ю – 8 очков;
# Ф, Щ, Ъ – 10 очков.
# Напишите программу, которая вычисляет стоимость введенного пользователем слова. 
# Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.
# Ввод:
# ноутбук
# Вывод:
# 12


# Задача №25. Решение в группах

# Напишите программу, которая принимает на вход строку, и отслеживает, сколько раз каждый символ уже встречался.
# Количество повторов добавляется к символам с помощью постфикса формата _n.

# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2

# Для решения данной задачи используйте функцию .split()

# my_string = 'a a a b c a a d c d d'
# my_split_string = my_string.split()


# dict = {}

# for element in my_split_string:
#     if element in dict.keys():
#         dict[element] +=1
#         print(f"{element}_{dict[element]}", end=" ")
#     else:
#         dict[element] = 0
#         print(element, end =" ")

# !!! 2


# N = "a a a b c a a d c d d f".split()
# count = 0

# for i in range(len(N)):
#     for j in range(i + 1,len(N)):
#         if N[i] == N[j]:
#             count +=1
#             N[j] += '_' + str(count)
#     count = 0 

# print(N)


# Задача №27. Решение в группах

# Пользователь вводит текст(строка). Словом считается последовательность непробельных символов идущих подряд, слова разделены одним пробелом. 
# Определите, сколько различных слов содержится в этом тексте.
# Input: She sells sea shells on the sea shore The shells that she sells are sea shells
# I'm sure So if she sells sea shells on the sea shore 
# I'm sure that the shells are sea shore shells

# Output: 13

# my_string = "She sells sea shells on the sea shore The shells that she sells are sea shells I'm sure So if she sells sea shells on the sea shore I'm sure that the shells are sea shore shells"
# str = "She sells sea shells on the sea shore The shells that she sells are sea shells I'm sure.So if she sells sea shells on the sea shore I'm sure that the shells are sea shore shells".lower()
# result = str.split()
# print(result)
# dict = []
# for i in result:
#     if i not in dict:
#         dict.append(i)
# print(len(dict))

# Задача №29. Решение в группах
# Ваня и Петя поспорили, кто быстрее решит следующую задачу: 
#     “Задана последовательность неотрицательных целых чисел. 
#     Требуется определить значение наибольшего элемента последовательности, которая завершается первым встретившимся нулем (число 0 не входит в последовательность)”. 
#     Однако 2  друга оказались не такими смышлеными. Никто из ребят не смог до конца сделать это задание. 
#     Они решили так: у кого будет меньше ошибок в коде, тот и выиграл спор. За помощью товарищи обратились к Вам, студентам.



# Примечание: Программные коды на следующих слайдах

# Варинат 1

# n = int(input())
# max_number = 0
# while n != 0:
#     n = int(input())
#     if n > max_number:
#         max_number = n
# print(max_number)

# Вариант 2

# max = 0
# while True:
#     num = int(input("введите число "))
#     if num == 0:
#         break
#     else:
#         if num > max:
#             max = num

# print('Максимум ',max)


# n = int(input())
# max_number = 1000
# while n != 0:
#    n = int(input())
#    if max_number > n:
#        max_number = n
# print(max_number)


# Задача №112515. Построчный редактор
# Напишите программу, которая управляет текстовым редактором по командам, записанным в файл output.txt . 
# Строки текста нумеруются с единицы. Сначала список строк пустой.
# Существует три команды: '+' – добавление строки, '-' – удаление строки и '*' – замена строки.
# Попытка удалить или заменить строку, которой нет в списке, считается ошибкой. 
# Ошибочна также и вставка строки с номером, который более чем на единицу превышает количество строк в тексте.

# Входные данные
# В файле input.txt записаны строки с командами, последняя строка файла – пустая.
# Первый символ любой рабочей строки – это команда ('+', '-' или '*'), далее без пробела записывается номер строки, 
# а затем (для команд '+' и '*') – текст новой строки, который нужно добавить или заменить.

# Выходные данные
# Программа должна вывести в файл output.txt все строки, которые остались в списке после обработки всех команд. 
# Если в списке не осталось ни одной строки, нужно вывести слово 'EMPTY'. Если произошла ошибка, нужно вывести слово 'ERROR'.

# Примеры
# входные данные
# +1 I am a pupil.
# +2 He is a pupil.
# +2 She is a pupil.
# +3 This is a pupil.
# *2 Bob went home.
# -3
# выходные данные
# I am a pupil.
# Bob went home.
# He is a pupil.



# N = []
# command = input()

# while command != 'done':
#     command = input()
#     if command[0] == "+":
#         N.append(command[1])
#     if command[0] == '-':
#         N.pop(command[1])
#     if command[0] == '*':
#         N[command[1]] = command


# 21:16
# Задача №112288. Симметричные пары
# Пара элементов в массиве называется симметричной , если эти элементы находятся на одинаковом расстоянии от концов массива. 
# Так в массиве размером N симметричными будут пары элементов с порядковыми номерами 1 и N , 2 и N - 1 и т.д. (при нумерации с единицы). 
# Напишите программу, которая заполняет массив из N элементов случайными целыми числами в диапазоне [ A , B ] и определяет номера двух симметричных элементов этого массива, 
# сумма которых чётная и максимальная среди всех пар симметричных элементов. 
# Если ни одной такой пары нет, нужно вывести два нуля. Если есть несколько таких пар, нужно вывести номера элементов, составляющих пару, ближайшую к центру массива.

# Входные данные
# Входная строка содержит три числа: границы диапазона случайных чисел A и B , а также размер массива N . 
# Все числа разделены пробелами. Гарантируется, что 0 < N ≤ 10000 .

# Выходные данные
# В первой строке программа должна вывести N элементов построенного массива, разделив их пробелами, а во второй строке – номера двух симметричных элементов массива, 
# имеющих максимальную чётную сумму. Если ни одной такой пары нет, нужно вывести два нуля.

# Примеры
# входные данные
# 10 20 10
# выходные данные
# 10 10 19 12 13 17 13 11 14 14
# 5 6


# Задачка с CodeWars

# n = str(input("Введите номер телефона без кода страны: "))
# number = f'+7({n[0]}{n[1]}{n[2]}) {n[3]}{n[4]}{n[5]}-{n[6]}{n[7]}{n[8]}{n[9]}'
# print (number)


# Complete the solution so that it splits the string into pairs of two characters. 
# If the string contains an odd number of characters then it should replace the missing second character of the final pair with an underscore ('_').

# Examples:

# * 'abc' =>  ['ab', 'c_']
# * 'abcdef' => ['ab', 'cd', 'ef']

